#!/bin/bash
threads=6
inputs_dir="/home/bioinformatikai/HW2/inputs"
outputs_dir="/home/bioinformatikai/HW2/outputs"

prefetch -O /home/bioinformatikai/HW2/inputs ERR204044 SRR15131330 SRR18214264
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/022/832/545/GCF_022832545.1_ASM2283254v1/GCF_022832545.1_ASM2283254v1_genomic.fna.gz
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/022/832/545/GCF_022832545.1_ASM2283254v1/GCF_022832545.1_ASM2283254v1_protein.faa.gz

fastq-dump --outdir /home/bioinformatikai/HW2/inputs/ --gzip --split-files /home/bioinformatikai/HW2/inputs/ERR204044
fastq-dump --outdir /home/bioinformatikai/HW2/inputs/ --gzip --split-files /home/bioinformatikai/HW2/inputs/SRR15131330
fastq-dump --outdir /home/bioinformatikai/HW2/inputs/ --gzip --split-files /home/bioinformatikai/HW2/inputs/SRR18214264

# Run FASTQC 
mkdir -p ${outputs_dir}/raw_data
fastqc -t ${threads} ${inputs_dir}/*fastq.gz -o ${outputs_dir}/raw_data

#The overall quality of the sequences does not look too bad. 
However, the sequence SRR18214264 reaches the red zone when measuring per-base sequence quality. 
There are significant levels of duplication in sequences

# Run standard FASTQ trimming and re-run FASTQC on cleaned FASTQ files
for i in ${inputs_dir}/*_1.fastq.gz;
do
  R1=${i};
  R2="${inputs_dir}/"$(basename ${i} _1.fastq.gz)"_2.fastq.gz";
  trim_galore -j ${threads} -o ${outputs_dir} --paired --length 20 ${R1} ${R2}
done

fastqc -t ${threads} ${outputs_dir}/*fq.gz -o ${outputs_dir}

#After rerunning FastQC, there were not many significant changes, however, the quality of reads slightly improved.
#The ERR204044_2_val_2 sample was not fully trimmed, however, that should not cause any significant problems.
#The per-base sequence quality of SRR18214264 was improved

# Create MultiQC plots for raw and processed data
multiqc -o ${outputs_dir}/raw_data ${outputs_dir}/raw_data
multiqc -o ${outputs_dir} ${outputs_dir}


##############################################################################################################################

#Assemble genomes using spades program.
spades.py --pe1-1 ERR204044_1_val_1.fq --pe1-2 ERR204044_2_val_2.fq -o /home/bioinformatikai/HW2/outputs/spades/ERR204044
spades.py --pe1-1 SRR15131330_1_val_1.fq --pe1-2 SRR15131330_2_val_2.fq -o /home/bioinformatikai/HW2/outputs/spades/SRR15131330
spades.py --pe1-1 SRR18214264_1_val_1.fq --pe1-2 SRR18214264_2_val_2.fq -o /home/bioinformatikai/HW2/outputs/spades/SRR18214264

#Assemble genomes using abyss program.
abyss-pe k=64 name=ERR204044 -C /home/bioinformatikai/HW2/outputs/abyss/ERR204044 in='/home/bioinformatikai/HW2/outputs/ERR204044_1_val_1.fq /home/bioinformatikai/HW2/outputs/ERR204044_2_val_2.fq'
abyss-pe k=64 name=SRR15131330 -C /home/bioinformatikai/HW2/outputs/abyss/SRR15131330 in='/home/bioinformatikai/HW2/outputs/SRR15131330_1_val_1.fq /home/bioinformatikai/HW2/outputs/SRR15131330_2_val_2.fq'
abyss-pe k=64 name=SRR18214264 -C /home/bioinformatikai/HW2/outputs/abyss/SRR18214264 in='/home/bioinformatikai/HW2/outputs/SRR18214264_1_val_1.fq /home/bioinformatikai/HW2/outputs/SRR18214264_2_val_2.fq'

#While there are slight differences in the specific metrics, 
#the overall trends and characteristics of the assemblies are comparable.
#The assemblies generated by different tools exhibit similar levels of genome coverage, duplication, and contig lengths
#In terms of contig lengths, the largest alignments range from approximately 41271 to 51210 base pairs, 
#and the NGA50 values range from approximately 5135 to 8874 base pairs. 
#These indicate the presence of relatively long contigs in all assemblies.
#The genome fraction percentages range from approximately 73.968% to 82.051%, 
#indicating that all assemblies captured a substantial portion of the reference genome 
#The duplication ratios are close to 1, suggesting a relatively low level of duplication in all assemblies.

#I chose the Spades assembly in all three files because the results were better

#spades-contigs-ERR204044_fasta has the highest genome fraction (77.022%)
#and a very low duplication ratio (1.003).

#spades-contigs-SRR15131330_fasta
#It has the highest genome fraction (82.051%) 
#and a relatively low duplication ratio (1.032).

# spades-contigs-SRR18214264_fasta
#It has a relatively high genome fraction (77.829%) 
#and a relatively low duplication ratio (1.028) 


#Mapping ERR204044

reads_dir="/home/bioinformatikai/HW2/outputs"
assembly_dir="/home/bioinformatikai/HW2/outputs/spades/ERR204044"
mapping_dir="/home/bioinformatikai/HW2/outputs/mapping"

mkdir -p ${mapping_dir}

read1="${reads_dir}/ERR204044_1_val_1.fq"
read2="${reads_dir}/ERR204044_2_val_2.fq"
assembly="${assembly_dir}/contigs.fasta"

bwa index ${assembly}
bwa mem -t 6 ${assembly} ${read1} ${read2} | samtools view -b -@ 6 - > ${mapping_dir}/ERR204044.bam
samtools sort -@ 6 ${mapping_dir}/ERR204044.bam -o ${mapping_dir}/ERR204044.sorted.bam
samtools index ${mapping_dir}/ERR204044.sorted.bam
samtools stats ${mapping_dir}/ERR204044.sorted.bam > ${mapping_dir}/ERR204044_map_stats.txt

#Mapping SRR15131330

reads_dir="/home/bioinformatikai/HW2/outputs"
assembly_dir="/home/bioinformatikai/HW2/outputs/spades/SRR15131330"
mapping_dir="/home/bioinformatikai/HW2/outputs/mapping"

mkdir -p ${mapping_dir}

read1="${reads_dir}/SRR15131330_1_val_1.fq"
read2="${reads_dir}/SRR15131330_2_val_2.fq"
assembly="${assembly_dir}/contigs.fasta"

bwa index ${assembly}
bwa mem -t 6 ${assembly} ${read1} ${read2} | samtools view -b -@ 6 - > ${mapping_dir}/SRR15131330.bam
samtools sort -@ 6 ${mapping_dir}/SRR15131330.bam -o ${mapping_dir}/SRR15131330.sorted.bam
samtools index ${mapping_dir}/SRR15131330.sorted.bam
samtools stats ${mapping_dir}/SRR15131330.sorted.bam > ${mapping_dir}/SRR15131330_map_stats.txt

#Mapping SRR18214264

reads_dir="/home/bioinformatikai/HW2/outputs"
assembly_dir="/home/bioinformatikai/HW2/outputs/spades/SRR18214264"
mapping_dir="/home/bioinformatikai/HW2/outputs/mapping"

mkdir -p ${mapping_dir}

read1="${reads_dir}/SRR18214264_1_val_1.fq"
read2="${reads_dir}/SRR18214264_2_val_2.fq"
assembly="${assembly_dir}/contigs.fasta"

bwa index ${assembly}
bwa mem -t 6 ${assembly} ${read1} ${read2} | samtools view -b -@ 6 - > ${mapping_dir}/SRR18214264.bam
samtools sort -@ 6 ${mapping_dir}/SRR18214264.bam -o ${mapping_dir}/SRR18214264.sorted.bam
samtools index ${mapping_dir}/SRR18214264.sorted.bam
samtools stats ${mapping_dir}/SRR18214264.sorted.bam > ${mapping_dir}/SRR18214264_map_stats.txt

#Evaluate mapping fraction as well as genome coverage from mapped reads

#ERR204044

#The number of properly paired reads is 5642658 out of 6051168, percentage of properly paired reads is approximately 92.9%.
#This indicates correct alignment and orientation.
#The average quality score (36.1) 
#The error rate is reported as 1.564794e-03
#Overall, these results indicate a successful mapping of the reads:
#The quality score and the percentage of properly paired reads are rather high
#And the error rate is low enough

#SRR18214264

#the number of properly paired reads is 4185612 out of 4273832, percentage of properly paired reads is approximately 97.5%. 
#This indicates correct alignment and orientation
#The average quality score (32.0)
#The error rate is reported as: 9.022661e-03
#Overall, these results indicate a successful mapping of the reads:
#Eventhough the quality score is the lowest out of all it is still rather high
#The error rate is significamtly bigger than others
#However the percantage of properly paired reads is the highest out of all

#SRR15131330

#the number of properly paired reads is 25524906 out of 28414526, percentage of properly paired reads is approximately 89.5%
#This indicates correct alignment and orientation
#he average quality is reported as 36.2
#The error rate is reported as: 1.895912e-03
#While the percentage of properly paired reads is the lowest out of all, it is still rather high
#The error rate a bit higher than in ERR204044 
#And the avarage quality is the highest out of all
